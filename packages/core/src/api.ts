/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/projects/{id}/logs": {
    /**
     * Push logs for a project
     * @description Pushes logs for a specific project domain
     */
    post: operations["projects-logs"];
  };
  "/{teamId}/projects/slug/{slug}": {
    /**
     * Create project
     * @description Gets a project by a unique slug.
     */
    get: operations["projects-getBySlug"];
  };
  "/{teamId}/projects/{id}": {
    /**
     * Create project
     * @description Gets a project by a unique ID.
     */
    get: operations["projects-getById"];
    /**
     * Delete project
     * @description Deletes a project by ID.
     */
    delete: operations["projects-delete"];
    /**
     * Update project
     * @description Updates a project by ID.
     */
    patch: operations["projects-update"];
  };
  "/{teamId}/projects": {
    /**
     * List projects
     * @description Lists projects within a team.
     */
    get: operations["projects-list"];
    /**
     * Create project
     * @description Create a project for a team. Projects are used to categorize resources within Moonbase.
     */
    post: operations["projects-create"];
  };
  "/tokens": {
    /**
     * Create token
     * @description Create an API token for use in Moonbase
     */
    post: operations["tokens-create"];
  };
  "/logs/{id}": {
    /**
     * Get team logs
     * @description Gets logs for a given team
     */
    get: operations["logs-getSingle"];
  };
  "/logs": {
    /**
     * Get team logs
     * @description Gets logs for a given team
     */
    get: operations["logs-list"];
  };
  "/logs/count": {
    /**
     * Count daily logs
     * @description Gets a daily aggreagtion of logs for a given team.
     */
    get: operations["logs-count"];
  };
  "/logs/total": {
    /**
     * Total Log Count
     * @description Gets the total of all logs collected and held in Moonbase.
     */
    get: operations["logs-total"];
  };
  "/logs/total/usage": {
    /**
     * Total Log Usage
     * @description Gets the total in bytes of all logs collected and held in Moonbase.
     */
    get: operations["logs-usageTotal"];
  };
  "/logs/total/interval": {
    /**
     * Total Log Usage
     * @description Gets the occurrence of logs across a timeline, grouped by date interval.
     */
    get: operations["logs-interval"];
  };
  "/logs/suggestions": {
    /**
     * Active log suggestions
     * @description Gets active log suggestion paths across the team. Used for suggestions in the query builder.
     */
    get: operations["logs-suggestions"];
  };
  "/integrations": {
    /**
     * List Integrations
     * @description Lists all available Moonbase integration types.
     */
    get: operations["integrationTypes-list"];
  };
  "/teams/{teamId}/configs": {
    /**
     * Create Integration Configuration
     * @description Creates an integration configuration for a given team
     */
    post: operations["integrationConfigs-create"];
  };
  "/teams/{teamId}/configs/{configId}": {
    /**
     * Delete Integration Configuration
     * @description Deletes an integration configuration for a given team.
     */
    delete: operations["integrationConfigs-delete"];
    /**
     * Update Integration Configuration
     * @description Updates an integration configuration for a team.
     */
    patch: operations["integrationConfigs-update"];
  };
  "/teams/{teamId}/integrations/{integrationId}": {
    /**
     * Read Integration Configuration
     * @description Reads an integration configuration for a team.
     */
    get: operations["integrationConfigs-read"];
  };
  "/health": {
    /**
     * Health check
     * @description Check if the API is healthy.
     */
    get: operations["health"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: never;
  responses: {
    /** @description Error response */
    error: {
      content: {
        "application/json": {
          message: string;
          code: string;
          issues?: {
              message: string;
            }[];
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /**
   * Push logs for a project
   * @description Pushes logs for a specific project domain
   */
  "projects-logs": {
    parameters: {
      path: {
        /** @description ID of the project. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            success: boolean;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create project
   * @description Gets a project by a unique slug.
   */
  "projects-getBySlug": {
    parameters: {
      path: {
        /** @description ID of the team that the project belongs to. */
        teamId: string;
        /** @description Unique slug of the project being fetched. */
        slug: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            id: string;
            name: string | null;
            teamId: string;
            slug: string;
            description: string | null;
            environment: string | null;
            /** Format: date-time */
            createdAt: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create project
   * @description Gets a project by a unique ID.
   */
  "projects-getById": {
    parameters: {
      path: {
        /** @description ID of the team that the project belongs to. */
        teamId: string;
        /** @description ID of the project being fetched. */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            id: string;
            name: string | null;
            teamId: string;
            slug: string;
            description: string | null;
            environment: string | null;
            /** Format: date-time */
            createdAt: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete project
   * @description Deletes a project by ID.
   */
  "projects-delete": {
    parameters: {
      path: {
        /** @description ID of the project being deleted. */
        id: string;
        /** @description ID of the team that the project belongs to. */
        teamId: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Update project
   * @description Updates a project by ID.
   */
  "projects-update": {
    parameters: {
      path: {
        /** @description ID of the project being updated. */
        id: string;
        /** @description ID of the team that the project belongs to. */
        teamId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Name of a project */
          name: string | null;
          /** @description A helpful description of the project. */
          description: string | null;
          /** @description The environment that the project lives in. */
          environment: string | null;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            id: string;
            name: string | null;
            teamId: string;
            slug: string;
            description: string | null;
            environment: string | null;
            /** Format: date-time */
            createdAt: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List projects
   * @description Lists projects within a team.
   */
  "projects-list": {
    parameters: {
      query?: {
        take?: unknown;
        after?: string;
      };
      path: {
        /** @description ID of the team that the project belongs to. */
        teamId: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            nodes: ({
                id: string;
                name: string | null;
                teamId: string;
                slug: string;
                description: string | null;
                environment: string | null;
                /** Format: date-time */
                createdAt: string;
              })[];
            pageInfo: {
              hasNextPage: boolean;
              hasPreviousPage: boolean;
              startCursor: string | null;
              endCursor: string | null;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create project
   * @description Create a project for a team. Projects are used to categorize resources within Moonbase.
   */
  "projects-create": {
    parameters: {
      path: {
        /** @description ID of the team that the project belongs to. */
        teamId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description Name of the project */
          name: string;
          /** @description A helpful description of the project. */
          description: string | null;
          /** @description The environment that the project lives in. */
          environment: string | null;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            id: string;
            name: string | null;
            teamId: string;
            slug: string;
            description: string | null;
            environment: string | null;
            /** Format: date-time */
            createdAt: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create token
   * @description Create an API token for use in Moonbase
   */
  "tokens-create": {
    requestBody: {
      content: {
        "application/json": {
          teamId: string;
          name: string;
          /** Format: date-time */
          expiresAt: string | null;
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            id: string;
            name: string;
            /** Format: date-time */
            expiresAt?: string | null;
            /** Format: date-time */
            lastUsedAt?: string | null;
            /** Format: date-time */
            createdAt: string;
            /** Format: date-time */
            deletedAt?: string | null;
            token: string;
            user: {
              email: string;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get team logs
   * @description Gets logs for a given team
   */
  "logs-getSingle": {
    parameters: {
      query: {
        /** @description ID of the team that the log belongs to. */
        teamId: string;
      };
      path: {
        /** @description The id of the log */
        id: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            body: string | {
              [key: string]: unknown;
            };
            level?: string;
            /** @default 0 */
            usageBytes?: string;
            hostname?: string;
            service?: string;
            /** Format: date-time */
            timestamp?: string;
            attributes?: {
              [key: string]: string;
            };
            userId: string;
            teamId: string;
            project: {
              /** @description The ID of the project associated with the log */
              id: string;
              /** @description The name of the project */
              name: string;
              /** @description The type of project */
              type: string | null;
              /** @description Project environment */
              environment: string | null;
            };
            user: {
              /** @description The display name of the user who committed the log */
              displayName: string;
            };
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Get team logs
   * @description Gets logs for a given team
   */
  "logs-list": {
    parameters: {
      query: {
        /** @description A search query to find logs by. */
        q?: unknown;
        /** @description Comma delimited list of projectIds. Ex 'cuid1,cuid2,cuid3'. */
        projectIds?: unknown;
        start?: string;
        end?: string;
        /** @description Indicates the next offset to start searching from. */
        cursor?: unknown;
        /** @description ID of the team that the logs belongs to. */
        teamId: string;
        limit?: unknown;
        rel?: "30_min" | "60_min" | "3_hours" | "6_hours" | "12_hours" | "24_hours" | "2_days" | "7_days" | "30_days";
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description A list of logs. */
            data: ({
                body: string | {
                  [key: string]: unknown;
                };
                level?: string;
                /** @default 0 */
                usageBytes?: string;
                hostname?: string;
                service?: string;
                /** Format: date-time */
                timestamp?: string;
                attributes?: {
                  [key: string]: string;
                };
                userId: string;
                teamId: string;
                /** Format: uuid */
                uuid: string;
              })[];
            /**
             * @description Indicates the next offset to start searching from.
             * @default null
             */
            cursor?: string | null;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Count daily logs
   * @description Gets a daily aggreagtion of logs for a given team.
   */
  "logs-count": {
    parameters: {
      query: {
        /** @description ID of the team that the logs belongs to. */
        teamId: string;
        metric: "30_day" | "60_day";
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
              count: number;
              date: string;
            }[];
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Total Log Count
   * @description Gets the total of all logs collected and held in Moonbase.
   */
  "logs-total": {
    parameters: {
      query?: {
        teamId?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            count: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Total Log Usage
   * @description Gets the total in bytes of all logs collected and held in Moonbase.
   */
  "logs-usageTotal": {
    parameters: {
      query?: {
        teamId?: string;
        projectId?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            usage: string;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Total Log Usage
   * @description Gets the occurrence of logs across a timeline, grouped by date interval.
   */
  "logs-interval": {
    parameters: {
      query?: {
        teamId?: string;
        rel?: "30_min" | "60_min" | "3_hours" | "6_hours" | "12_hours" | "24_hours" | "2_days" | "7_days" | "30_days";
        start?: string;
        end?: string;
        /** @description A search query to find logs by. */
        q?: unknown;
        /** @description Comma delimited list of projectIds. Ex 'cuid1,cuid2,cuid3'. */
        projectIds?: unknown;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
              other: number;
              date: string;
              error: number;
            }[];
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Active log suggestions
   * @description Gets active log suggestion paths across the team. Used for suggestions in the query builder.
   */
  "logs-suggestions": {
    parameters: {
      query: {
        /** @description Gets a list of columns that match a search term. Limited to 10. */
        term: string;
        teamId?: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": string[];
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * List Integrations
   * @description Lists all available Moonbase integration types.
   */
  "integrationTypes-list": {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Create Integration Configuration
   * @description Creates an integration configuration for a given team
   */
  "integrationConfigs-create": {
    parameters: {
      path: {
        /** @description ID of the team that the log is for. */
        teamId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The configuration being created for the integration */
          config: ({
            name: string;
            type: "s3-compatible" | "digitalocean";
            accessKeyId: string;
            secretKey: string;
            path: string;
            bucket: string;
            region: string;
            interval: "day" | "week" | "month";
          }) | {
            name: string;
          };
          /** @description The id of the integration */
          integrationId: string;
          projectIds: string[];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description The name of the team the configuration belongs to. */
            teamId: string;
            /**
             * Format: date-time
             * @description The date the config was deleted
             */
            deletedAt: string | null;
            /** @description The ID of the associated integration type. */
            integrationId: string;
            /** @description The ID of the integration configuration. */
            id: string;
            /** @description The parsed version of the encrypted configuration. */
            encryptedConfig?: unknown;
            /** @description Whether the config is enabled. */
            enabled: boolean;
            /** @description Potential error on the configuration. */
            error: string | null;
            /**
             * Format: date-time
             * @description Date when the config was created.
             */
            createdAt: string;
            /** @description Values for the configuration */
            config?: unknown;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Delete Integration Configuration
   * @description Deletes an integration configuration for a given team.
   */
  "integrationConfigs-delete": {
    parameters: {
      path: {
        /** @description ID of the team that the configuration is for. */
        teamId: string;
        /** @description The id of the integration config to delete. */
        configId: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": unknown;
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Update Integration Configuration
   * @description Updates an integration configuration for a team.
   */
  "integrationConfigs-update": {
    parameters: {
      path: {
        /** @description ID of the team that the log is for. */
        teamId: string;
        /** @description The id of the configuration to update. */
        configId: string;
      };
    };
    requestBody: {
      content: {
        "application/json": {
          /** @description The configuration to upsert. */
          config: ({
            name: string;
            type: "s3-compatible" | "digitalocean";
            accessKeyId: string;
            secretKey: string;
            path: string;
            bucket: string;
            region: string;
            interval: "day" | "week" | "month";
          }) | {
            name: string;
          };
          projectIds: string[];
        };
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": {
            /** @description The name of the team the configuration belongs to. */
            teamId: string;
            /**
             * Format: date-time
             * @description The date the config was deleted
             */
            deletedAt: string | null;
            /** @description The ID of the associated integration type. */
            integrationId: string;
            /** @description The ID of the integration configuration. */
            id: string;
            /** @description The parsed version of the encrypted configuration. */
            encryptedConfig?: unknown;
            /** @description Whether the config is enabled. */
            enabled: boolean;
            /** @description Potential error on the configuration. */
            error: string | null;
            /**
             * Format: date-time
             * @description Date when the config was created.
             */
            createdAt: string;
            /** @description Values for the configuration */
            config?: unknown;
          };
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Read Integration Configuration
   * @description Reads an integration configuration for a team.
   */
  "integrationConfigs-read": {
    parameters: {
      path: {
        /** @description ID of the team that the log is for. */
        teamId: string;
        /** @description The id of the integration */
        integrationId: string;
      };
    };
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": ({
              /** @description The name of the team the configuration belongs to. */
              teamId: string;
              /** @description The configured projects. */
              projectIntegrations: {
                  projectId: string;
                }[];
              /**
               * Format: date-time
               * @description The date the config was deleted
               */
              deletedAt: string | null;
              /** @description The ID of the associated integration type. */
              integrationId: string;
              /** @description The ID of the integration configuration. */
              id: string;
              /** @description The parsed version of the encrypted configuration. */
              encryptedConfig?: unknown;
              /** @description Whether the config is enabled. */
              enabled: boolean;
              /** @description Potential error on the configuration. */
              error: string | null;
              /**
               * Format: date-time
               * @description Date when the config was created.
               */
              createdAt: string;
              /** @description Values for the configuration */
              config?: unknown;
              configJobs: ({
                  /**
                   * Format: date-time
                   * @description Completed time of the configuration job
                   */
                  completedAt: string | null;
                  /**
                   * Format: date-time
                   * @description When the config job was created
                   */
                  createdAt: string;
                  /** @description Potential error with the config job. */
                  error: string | null;
                  /** @description ID of the config job. */
                  id: string;
                  /** @description ID of the associated integration configuration. */
                  integrationConfigId: string;
                  /** @description Arbitrary output of the config job. */
                  output?: unknown;
                  /** @enum {string} */
                  state: "error" | "complete" | "pending";
                })[];
            })[];
        };
      };
      default: components["responses"]["error"];
    };
  };
  /**
   * Health check
   * @description Check if the API is healthy.
   */
  health: {
    responses: {
      /** @description Successful response */
      200: {
        content: {
          "application/json": "HEALTHY";
        };
      };
      default: components["responses"]["error"];
    };
  };
}
